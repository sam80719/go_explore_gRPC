// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: greeting.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingServiceClient is the client API for GreetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingServiceClient interface {
	// unary
	Greeting(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (*GreetingResponse, error)
	// server stream
	GreetingManyTime(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (GreetingService_GreetingManyTimeClient, error)
	// client stream
	LongGreeting(ctx context.Context, opts ...grpc.CallOption) (GreetingService_LongGreetingClient, error)
}

type greetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingServiceClient(cc grpc.ClientConnInterface) GreetingServiceClient {
	return &greetingServiceClient{cc}
}

func (c *greetingServiceClient) Greeting(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (*GreetingResponse, error) {
	out := new(GreetingResponse)
	err := c.cc.Invoke(ctx, "/greeting.GreetingService/Greeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingServiceClient) GreetingManyTime(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (GreetingService_GreetingManyTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[0], "/greeting.GreetingService/GreetingManyTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceGreetingManyTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetingService_GreetingManyTimeClient interface {
	Recv() (*GreetingResponse, error)
	grpc.ClientStream
}

type greetingServiceGreetingManyTimeClient struct {
	grpc.ClientStream
}

func (x *greetingServiceGreetingManyTimeClient) Recv() (*GreetingResponse, error) {
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetingServiceClient) LongGreeting(ctx context.Context, opts ...grpc.CallOption) (GreetingService_LongGreetingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[1], "/greeting.GreetingService/LongGreeting", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceLongGreetingClient{stream}
	return x, nil
}

type GreetingService_LongGreetingClient interface {
	Send(*GreetingRequest) error
	CloseAndRecv() (*GreetingResponse, error)
	grpc.ClientStream
}

type greetingServiceLongGreetingClient struct {
	grpc.ClientStream
}

func (x *greetingServiceLongGreetingClient) Send(m *GreetingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingServiceLongGreetingClient) CloseAndRecv() (*GreetingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingServiceServer is the server API for GreetingService service.
// All implementations must embed UnimplementedGreetingServiceServer
// for forward compatibility
type GreetingServiceServer interface {
	// unary
	Greeting(context.Context, *GreetingRequest) (*GreetingResponse, error)
	// server stream
	GreetingManyTime(*GreetingRequest, GreetingService_GreetingManyTimeServer) error
	// client stream
	LongGreeting(GreetingService_LongGreetingServer) error
	mustEmbedUnimplementedGreetingServiceServer()
}

// UnimplementedGreetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingServiceServer struct {
}

func (UnimplementedGreetingServiceServer) Greeting(context.Context, *GreetingRequest) (*GreetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greeting not implemented")
}
func (UnimplementedGreetingServiceServer) GreetingManyTime(*GreetingRequest, GreetingService_GreetingManyTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetingManyTime not implemented")
}
func (UnimplementedGreetingServiceServer) LongGreeting(GreetingService_LongGreetingServer) error {
	return status.Errorf(codes.Unimplemented, "method LongGreeting not implemented")
}
func (UnimplementedGreetingServiceServer) mustEmbedUnimplementedGreetingServiceServer() {}

// UnsafeGreetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServiceServer will
// result in compilation errors.
type UnsafeGreetingServiceServer interface {
	mustEmbedUnimplementedGreetingServiceServer()
}

func RegisterGreetingServiceServer(s grpc.ServiceRegistrar, srv GreetingServiceServer) {
	s.RegisterService(&GreetingService_ServiceDesc, srv)
}

func _GreetingService_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServiceServer).Greeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeting.GreetingService/Greeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServiceServer).Greeting(ctx, req.(*GreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingService_GreetingManyTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetingServiceServer).GreetingManyTime(m, &greetingServiceGreetingManyTimeServer{stream})
}

type GreetingService_GreetingManyTimeServer interface {
	Send(*GreetingResponse) error
	grpc.ServerStream
}

type greetingServiceGreetingManyTimeServer struct {
	grpc.ServerStream
}

func (x *greetingServiceGreetingManyTimeServer) Send(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetingService_LongGreeting_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServiceServer).LongGreeting(&greetingServiceLongGreetingServer{stream})
}

type GreetingService_LongGreetingServer interface {
	SendAndClose(*GreetingResponse) error
	Recv() (*GreetingRequest, error)
	grpc.ServerStream
}

type greetingServiceLongGreetingServer struct {
	grpc.ServerStream
}

func (x *greetingServiceLongGreetingServer) SendAndClose(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingServiceLongGreetingServer) Recv() (*GreetingRequest, error) {
	m := new(GreetingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingService_ServiceDesc is the grpc.ServiceDesc for GreetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greeting.GreetingService",
	HandlerType: (*GreetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _GreetingService_Greeting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetingManyTime",
			Handler:       _GreetingService_GreetingManyTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LongGreeting",
			Handler:       _GreetingService_LongGreeting_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "greeting.proto",
}
